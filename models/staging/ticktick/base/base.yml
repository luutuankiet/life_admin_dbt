version: 2
models:
  - name: base__ticktick__tasks
    description: |
      - base table containing latest task state pulled from ticktick open API
      - source : https://developer.ticktick.com/api#/openapi?id=task-1
    columns:
      - name: task_id
        data_type: string
        description: Task identifier
        config:
          meta: {}
          tags: []
      - name: project_id
        data_type: string
        description: Task project id
        config:
          meta: {}
          tags: []
      - name: sort_order
        data_type: int64
        description: Task sort order
        config:
          meta: {}
          tags: []
      - name: title
        data_type: string
        description: Task title
        config:
          meta: {}
          tags: []
      - name: timezone
        data_type: string
        description: Task timezone
        config:
          meta: {}
          tags: []
      - name: is_allday
        data_type: boolean
        description: All day
        config:
          meta: {}
          tags: []
      - name: priority
        data_type: int64
        description: 'Task priority. Value : None:0, Low:1, Medium:3, High5'
        config:
          meta: {}
          tags: []
      - name: status
        data_type: int64
        description: 'Task completion status. Value : Normal: 0, Completed: 2'
        config:
          meta: {}
          tags: []
      - name: column_id
        data_type: string
        description: ''
        config:
          meta: {}
          tags: []
      - name: etag
        data_type: string
        description: ephemeral slug generated by ticktick. Not useful for analytics.
        config:
          meta: {}
          tags: []
      - name: kind
        data_type: string
        description: '"TASK" or "NOTE"'
        config:
          meta: {}
          tags: []
      - name: repeat_flag
        data_type: string
        description: |
          Recurring rules of task.
          - Example : "RRULE:FREQ=DAILY;INTERVAL=1"
        config:
          meta: {}
          tags: []
      - name: parent_id
        data_type: string
        description: Parent task id
        config:
          meta: {}
          tags: []
      - name: tags
        description: Array of tags assigned to the task.
        config:
          meta: {}
          tags: []
      - name: childids
        data_type: array<string>
        description: list of subtasks
        config:
          meta: {}
          tags: []
      - name: reminders
        data_type: array<string>
        description: List of reminder triggers. Example [ "TRIGGER:P0DT9H0M0S", "TRIGGER:PT0S" ]
        config:
          meta: {}
          tags: []
      - name: start_date
        data_type: datetime
        description: |
          - Start date time in "yyyy-MM-dd'T'HH:mm:ssZ". 
          - Timezone conversion available with env var DBT_TIMEZONE
        config:
          meta: {}
          tags: []
      - name: due_date
        data_type: datetime
        description: |
          - Task due date time in "yyyy-MM-dd'T'HH:mm:ssZ"
          - Timezone conversion available with env var DBT_TIMEZONE
        config:
          meta: {}
          tags: []
      - name: _completed_time
        data_type: datetime
        description: |
          - Task completed time in "yyyy-MM-dd'T'HH:mm:ssZ"
          - Is not useful so kept internally for reference only.
          - Timezone conversion available with env var DBT_TIMEZONE
        config:
          meta: {}
          tags: []
  - name: base__ticktick__tasks_snapshot
    description: >-
      tasks snapshot that gets loaded on short interval to capture completed / deleted tasks
    columns:
      - name: task_id
        data_type: string
        description: Task identifier
        config:
          meta: {}
          tags: []
      - name: project_id
        data_type: string
        description: Task project id
        config:
          meta: {}
          tags: []
      - name: sort_order
        data_type: int64
        description: Task sort order
        config:
          meta: {}
          tags: []
      - name: title
        data_type: string
        description: Task title
        config:
          meta: {}
          tags: []
      - name: timezone
        data_type: string
        description: Task timezone
        config:
          meta: {}
          tags: []
      - name: is_allday
        data_type: boolean
        description: All day
        config:
          meta: {}
          tags: []
      - name: priority
        data_type: int64
        description: 'Task priority. Value : None:0, Low:1, Medium:3, High5'
        config:
          meta: {}
          tags: []
      - name: status
        data_type: int64
        description: 'Task completion status. Value : Normal: 0, Completed: 2'
        config:
          meta: {}
          tags: []
      - name: column_id
        data_type: string
        description: ''
        config:
          meta: {}
          tags: []
      - name: etag
        data_type: string
        description: ephemeral slug generated by ticktick. Not useful for analytics.
        config:
          meta: {}
          tags: []
      - name: kind
        data_type: string
        description: '"TASK" or "NOTE"'
        config:
          meta: {}
          tags: []
      - name: repeat_flag
        data_type: string
        description: |
          Recurring rules of task.
          - Example : "RRULE:FREQ=DAILY;INTERVAL=1"
        config:
          meta: {}
          tags: []
      - name: reminders
        data_type: array<string>
        description: List of reminder triggers. Example [ "TRIGGER:P0DT9H0M0S", "TRIGGER:PT0S" ]
        config:
          meta: {}
          tags: []
      - name: childids
        data_type: array<string>
        description: list of subtasks
        config:
          meta: {}
          tags: []
      - name: tags
        description: Array of tags assigned to the task.
        config:
          meta: {}
          tags: []
      - name: parent_id
        data_type: string
        description: Parent task id
        config:
          meta: {}
          tags: []
      - name: dbt_scd_id
        data_type: string
        description: >-
          A unique key generated for each snapshot row. Timezone conversion available with env var DBT_TIMEZONE
        config:
          meta: {}
          tags: []
      - name: start_date
        data_type: datetime
        description: |
          - Start date time in "yyyy-MM-dd'T'HH:mm:ssZ". 
          - Timezone conversion available with env var DBT_TIMEZONE
        config:
          meta: {}
          tags: []
      - name: due_date
        data_type: datetime
        description: |
          - Task due date time in "yyyy-MM-dd'T'HH:mm:ssZ"
          - Timezone conversion available with env var DBT_TIMEZONE
        config:
          meta: {}
          tags: []
      - name: _completed_time
        data_type: datetime
        description: |
          - Task completed time in "yyyy-MM-dd'T'HH:mm:ssZ"
          - Is not useful so kept internally for reference only.
          - Timezone conversion available with env var DBT_TIMEZONE
        config:
          meta: {}
          tags: []
      - name: dbt_updated_at
        data_type: datetime
        description: >-
          The updated_at timestamp of the source record when this snapshot row was inserted. Timezone
          conversion available with env var DBT_TIMEZONE
        config:
          meta: {}
          tags: []
      - name: dbt_valid_from
        data_type: datetime
        description: >-
          The timestamp when this snapshot row was first inserted and became valid. Timezone conversion
          available with env var DBT_TIMEZONE
        config:
          meta: {}
          tags: []
      - name: dbt_valid_to
        data_type: datetime
        description: >-
          The timestamp when this row became invalidated. For current records, this is NULL by default
          or the value specified in dbt_valid_to_current. Timezone conversion available with env var DBT_TIMEZONE
        config:
          meta: {}
          tags: []
  - name: base__ticktick__projects
    description: |
      - Base table containing latest project state pulled from ticktick open API
      - Source : https://developer.ticktick.com/api#/openapi?id=project-1
    columns:
      - name: project_id
        data_type: string
        description: Project identifier
        config:
          meta: {}
          tags: []
      - name: project_name
        data_type: string
        description: Project name
        config:
          meta: {}
          tags: []
      - name: sort_order
        data_type: int64
        description: Order value
        config:
          meta: {}
          tags: []
      - name: group_id
        data_type: string
        description: Project group identifier
        config:
          meta: {}
          tags: []
      - name: kind
        data_type: string
        description: "\"TASK\" or \"NOTE\"\n"
        config:
          meta: {}
          tags: []
      - name: color
        data_type: string
        description: Project color
        config:
          meta: {}
          tags: []
      - name: view_mode
        data_type: string
        description: view mode, "list", "kanban", "timeline"
        config:
          meta: {}
          tags: []
      - name: permission
        data_type: string
        description: '"read", "write" or "comment"'
        config:
          meta: {}
          tags: []
      - name: closed
        data_type: boolean
        description: Project closed
        config:
          meta: {}
          tags: []
  - name: base__ticktick__projects_snapshot
    description: >-
      project snapshot that gets loaded on short interval to capture completed / deleted projects
    columns:
      - name: project_id
        data_type: string
        description: Project identifier
        config:
          meta: {}
          tags: []
      - name: project_name
        data_type: string
        description: Project name
        config:
          meta: {}
          tags: []
      - name: sort_order
        data_type: int64
        description: Order value
        config:
          meta: {}
          tags: []
      - name: group_id
        data_type: string
        description: Project group identifier
        config:
          meta: {}
          tags: []
      - name: kind
        data_type: string
        description: "\"TASK\" or \"NOTE\"\n"
        config:
          meta: {}
          tags: []
      - name: color
        data_type: string
        description: Project color
        config:
          meta: {}
          tags: []
      - name: view_mode
        data_type: string
        description: view mode, "list", "kanban", "timeline"
        config:
          meta: {}
          tags: []
      - name: permission
        data_type: string
        description: '"read", "write" or "comment"'
        config:
          meta: {}
          tags: []
      - name: closed
        data_type: boolean
        description: Project closed
        config:
          meta: {}
          tags: []
      - name: dbt_scd_id
        data_type: string
        description: >-
          A unique key generated for each snapshot row. Timezone conversion available with env var DBT_TIMEZONE
        config:
          meta: {}
          tags: []
      - name: dbt_updated_at
        data_type: datetime
        description: >-
          The updated_at timestamp of the source record when this snapshot row was inserted. Timezone
          conversion available with env var DBT_TIMEZONE
        config:
          meta: {}
          tags: []
      - name: dbt_valid_from
        data_type: datetime
        description: >-
          The timestamp when this snapshot row was first inserted and became valid. Timezone conversion
          available with env var DBT_TIMEZONE
        config:
          meta: {}
          tags: []
      - name: dbt_valid_to
        data_type: datetime
        description: >-
          The timestamp when this row became invalidated. For current records, this is NULL by default
          or the value specified in dbt_valid_to_current. Timezone conversion available with env var DBT_TIMEZONE
        config:
          meta: {}
          tags: []
