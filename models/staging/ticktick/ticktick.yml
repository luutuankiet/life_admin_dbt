version: 2
models:
  - name: stg__ticktick__tasks
    columns:
      - name: childids
        description: list of subtasks
        config:
          meta: {}
          tags: []
      - name: column_id
        description: ''
        config:
          meta: {}
          tags: []
      - name: completed_time
        data_type: datetime
        description: |
          Timestamp when the task was completed / wont do.
          - Inferred from dbt snapshot.
          - Ticktick API do not provide this field (at least not reliably cause it only retrieve new task).
          - Timezone conversion available with env var DBT_TIMEZONE
        config:
          meta: {}
          tags: []
      - name: due_date
        data_type: datetime
        description: |
          - Task due date time in "yyyy-MM-dd'T'HH:mm:ssZ"
          - Timezone conversion available with env var DBT_TIMEZONE
        config:
          meta: {}
          tags: []
      - name: etag
        description: ephemeral slug generated by ticktick. Not useful for analytics.
        config:
          meta: {}
          tags: []
      - name: gtd_work_type
        description: |
          optional field indicating if a task was done under
          - shallow work (during clarification) or 
          - deep work (scheduled properly into next action)
        config:
          meta: {}
          tags: []
      - name: is_allday
        description: All day
        config:
          meta: {}
          tags: []
      - name: kind
        description: '"TASK" or "NOTE"'
        config:
          meta: {}
          tags: []
      - name: parent_id
        description: Parent task id
        config:
          meta: {}
          tags: []
      - name: priority
        description: 'Task priority. Value : None:0, Low:1, Medium:3, High5'
        config:
          meta: {}
          tags: []
      - name: project_id
        description: Task project id
        config:
          meta: {}
          tags: []
      - name: reminders
        description: List of reminder triggers. Example [ "TRIGGER:P0DT9H0M0S", "TRIGGER:PT0S" ]
        config:
          meta: {}
          tags: []
      - name: repeat_flag
        description: |
          Recurring rules of task.
          - Example : "RRULE:FREQ=DAILY;INTERVAL=1"
        config:
          meta: {}
          tags: []
      - name: sort_order
        description: Task sort order
        config:
          meta: {}
          tags: []
      - name: start_date
        data_type: datetime
        description: |
          - Start date time in "yyyy-MM-dd'T'HH:mm:ssZ". 
          - Timezone conversion available with env var DBT_TIMEZONE
        config:
          meta: {}
          tags: []
      - name: status
        description: 'Task completion status. Value : Normal: 0, Completed: 2'
        config:
          meta: {}
          tags: []
      - name: tags
        description: Array of tags assigned to the task.
        config:
          meta: {}
          tags: []
      - name: task_id
        data_tests:
          - unique
          - not_null
        description: Task identifier
        config:
          meta: {}
          tags: []
      - name: timezone
        description: Task timezone
        config:
          meta: {}
          tags: []
      - name: title
        description: Task title
        config:
          meta: {}
          tags: []
      - name: updated_time
        data_type: datetime
        description: |
          inferred updated time; Only available for completed task
          due to ticktick API limitation we had to workaround with
          snapshots.
        config:
          meta: {}
          tags: []
  - name: stg__ticktick__projects
    columns:
      - name: closed
        description: Project closed
        config:
          meta: {}
          tags: []
      - name: color
        description: Project color
        config:
          meta: {}
          tags: []
      - name: completed_time
        data_type: datetime
        description: |
          Timestamp when the project was closed/archived.
          - Inferred from dbt snapshot.
          - Ticktick API do not provide this field.
          - Timezone conversion available with env var DBT_TIMEZONE
        config:
          meta: {}
          tags: []
      - name: group_id
        description: Project group identifier
        config:
          meta: {}
          tags: []
      - name: kind
        description: "\"TASK\" or \"NOTE\"\n"
        config:
          meta: {}
          tags: []
      - name: permission
        description: '"read", "write" or "comment"'
        config:
          meta: {}
          tags: []
      - name: project_id
        data_tests:
          - unique
          - not_null
        description: Project identifier
        config:
          meta: {}
          tags: []
      - name: project_name
        description: Project name
        config:
          meta: {}
          tags: []
      - name: sort_order
        description: Order value
        config:
          meta: {}
          tags: []
      - name: view_mode
        description: view mode, "list", "kanban", "timeline"
        config:
          meta: {}
          tags: []
  - name: stg__ticktick__task_tags
    description: |
      - Bridge table to break down tags <> task relation.
      - This is due to our design fact_tasks grain is the task and not the tags.
    columns:
      - name: tag
        description: A single tag assigned to the task.
        config:
          meta: {}
          tags: []
      - name: task_id
        description: Task identifier
        config:
          meta: {}
          tags: []
  - name: stg__ticktick__project_folder
    description: |
      - Folders where the projects belong to.
      - Inferred from dummy projects created from user with this specific naming convention : `folder_map - '<the_name>'`
      - Has a failsafe in that if user didn't create dummy label project then we just don't load any data.
    columns:
      - name: folder_id
        description: unique identifer of the folder
        data_tests:
          - unique
        config:
          meta: {}
          tags: []
      - name: folder_name
        description: The folder name. Inferred from dummy project manually created by users
        config:
          meta: {}
          tags: []
